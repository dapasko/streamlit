# app.py
import streamlit as st
from openai import OpenAI
import io
from PyPDF2 import PdfReader
from PIL import Image
import pandas as pd
import mimetypes
import json
from typing import List, Dict, Any, Optional
import time
import base64
import os

# =========================
# –ö–æ–Ω—Ñ–∏–≥–∏
# =========================
MODEL_NAME = "openrouter/sonoma-sky-alpha"
MODEL_CONTEXT_TOKENS = 2_000_000  # –æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏ (–≤ —Ç–æ–∫–µ–Ω–∞—Ö) ‚Äî —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
DEFAULT_MAX_TOKENS_RESPONSE = 200000
DEFAULT_TEMPERATURE = 0.7

# =========================
# –£—Ç–∏–ª–∏—Ç—ã
# =========================
def approx_tokens_from_text(text: str) -> int:
    """
    –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.
    –ü—Ä–∞–≤–∏–ª–æ: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –∏–ª–∏ ~1 token = 4 —Å–∏–º–≤–æ–ª–∞ (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ).
    –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ~ 4 –±–∞–π—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
    –≠—Ç–æ **–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ**, –Ω–æ –¥–∞—ë—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
    """
    if not text:
        return 0
    # —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã (Unicode) –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–π—Ç;
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ utf-8 –¥–ª–∏–Ω—É –≤ –±–∞–π—Ç–∞—Ö
    b = text.encode("utf-8")
    return max(1, int(len(b) / 4))

def safe_read_bytes(uploaded_file) -> bytes:
    uploaded_file.seek(0)
    return uploaded_file.read()

def text_download_link(text: str, filename: str, label: str = "–°–∫–∞—á–∞—Ç—å"):
    b = text.encode("utf-8")
    href = f"data:file/txt;base64,{base64.b64encode(b).decode()}"
    st.markdown(f"[{label}]({href})", unsafe_allow_html=True)

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–∏)
# =========================
@st.cache_data
def process_file_bytes(name: str, file_bytes: bytes) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ –±–∞–π—Ç–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    {
        "name": str,
        "content": str,  # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        "type": str,     # csv, pdf, image, txt, json, py, unknown
        "preview": str,  # –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–∫–æ—Ä–æ—Ç–∫–∏–π)
        "size": int
    }
    """
    mime_type, _ = mimetypes.guess_type(name)
    extension = os.path.splitext(name)[1].lower()
    file_type = "unknown"
    content = ""
    preview = ""
    size = len(file_bytes)

    try:
        if extension in [".jpg", ".jpeg", ".png", ".bmp", ".gif", ".webp"]:
            file_type = "image"
            try:
                img = Image.open(io.BytesIO(file_bytes))
                content = f"[Image {name} ‚Äî {img.size[0]}x{img.size[1]} px]"
                preview = content
            except Exception as e:
                content = f"[Image {name} ‚Äî unable to open: {e}]"
                preview = content

        elif extension == ".pdf":
            file_type = "pdf"
            try:
                reader = PdfReader(io.BytesIO(file_bytes))
                text_parts = []
                for page in reader.pages:
                    page_text = page.extract_text() or ""
                    text_parts.append(page_text)
                text = "\n".join(text_parts)
                content = text
                preview = text[:1000] + ("..." if len(text) > 1000 else "")
            except Exception as e:
                content = f"[PDF {name} ‚Äî error extracting text: {e}]"
                preview = content

        elif extension in [".txt", ".py", ".md", ".log"]:
            file_type = "text"
            content = file_bytes.decode("utf-8", errors="ignore")
            preview = content[:1000] + ("..." if len(content) > 1000 else "")

        elif extension == ".csv":
            file_type = "csv"
            text = file_bytes.decode("utf-8", errors="ignore")
            content = text
            try:
                df = pd.read_csv(io.StringIO(text))
                preview = f"CSV {name}: {len(df)} rows, columns: {list(df.columns)}\n" + df.head(5).to_csv(index=False)
            except Exception:
                preview = text[:1000] + ("..." if len(text) > 1000 else "")

        elif extension == ".json":
            file_type = "json"
            text = file_bytes.decode("utf-8", errors="ignore")
            content = text
            try:
                data = json.loads(text)
                preview = json.dumps(data, ensure_ascii=False, indent=2)[:1000] + ("..." if len(text) > 1000 else "")
            except Exception:
                preview = text[:1000] + ("..." if len(text) > 1000 else "")

        else:
            # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            try:
                text = file_bytes.decode("utf-8", errors="ignore")
                file_type = "text"
                content = text
                preview = text[:1000] + ("..." if len(text) > 1000 else "")
            except:
                file_type = "binary"
                content = f"[–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª {name}, —Ä–∞–∑–º–µ—Ä {size} –±–∞–π—Ç]"
                preview = content

    except Exception as e:
        file_type = "error"
        content = f"[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {name}: {e}]"
        preview = content

    return {
        "name": name,
        "content": content,
        "type": file_type,
        "preview": preview,
        "size": size
    }

# =========================
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
# =========================
def build_api_messages(system_prompt: str,
                       chat_messages: List[Dict[str, str]],
                       files: List[Dict[str, Any]],
                       include_files: List[str],
                       use_full_history: bool,
                       limit_messages: int) -> List[Dict[str, str]]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (system + user/assistant) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API.
    include_files ‚Äî —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    use_full_history ‚Äî –µ—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é; –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit_messages.
    """
    messages = [{"role": "system", "content": system_prompt}]

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ user-—Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏)
    for f in files:
        if f["name"] in include_files:
            # –ø–æ–º–µ—Å—Ç–∏–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫—É—é –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∑–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            preview = f.get("preview", "")
            # –ü—Ä–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑–º–µ—Ä–µ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ preview –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            messages.append({
                "role": "user",
                "content": f"[–§–∞–π–ª: {f['name']} (type={f['type']}, size={f['size']} bytes)]\nPreview:\n{preview}\n\nFull content:\n{f['content']}"
            })

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    hist = chat_messages if use_full_history else chat_messages[-limit_messages:]
    for m in hist:
        messages.append({"role": m["role"], "content": m["content"]})

    return messages

def estimate_total_tokens(messages: List[Dict[str, str]]) -> int:
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —Å—É–º–º–∏—Ä—É–µ–º –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    total = 0
    for m in messages:
        total += approx_tokens_from_text(m.get("content", ""))
    # –ø–ª—é—Å –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    total += int(len(messages) * 3)
    return total

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Streamlit session_state
# =========================
st.set_page_config(page_title="ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç (Sonoma)", page_icon="ü§ñ", layout="wide")

if "messages" not in st.session_state:
    st.session_state.messages = []  # —Å–ø–∏—Å–æ–∫ dict {"role": "user"/"assistant", "content": "...", "ts": ...}
if "files" not in st.session_state:
    st.session_state.files = []  # —Å–ø–∏—Å–æ–∫ dict –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö process_file_bytes + {"include": True}
if "max_tokens" not in st.session_state:
    st.session_state.max_tokens = DEFAULT_MAX_TOKENS_RESPONSE
if "temperature" not in st.session_state:
    st.session_state.temperature = DEFAULT_TEMPERATURE
if "system_prompt" not in st.session_state:
    st.session_state.system_prompt = (
        "You are Sonoma, an experienced fullstack Python developer. "
        "You answer Russian or English requests with code, instructions, or file analysis. "
        "Be concise and provide examples when needed."
    )
if "use_full_history" not in st.session_state:
    st.session_state.use_full_history = True
if "limit_messages" not in st.session_state:
    st.session_state.limit_messages = 50
if "include_files" not in st.session_state:
    st.session_state.include_files = []  # –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
if "api_key" not in st.session_state:
    st.session_state.api_key = st.secrets.get("OPENROUTER_API_KEY") or ""

# =========================
# Sidebar ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    st.markdown("**–ú–æ–¥–µ–ª—å**: " + MODEL_NAME)
    st.write("–û–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏: **2 000 000** —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ).")

    # API –∫–ª—é—á
    api_key_input = st.text_input("API-–∫–ª—é—á OpenRouter (OPENROUTER_API_KEY)", value=st.session_state.api_key, type="password")
    if api_key_input != st.session_state.api_key:
        st.session_state.api_key = api_key_input

    # max tokens (–æ—Ç–≤–µ—Ç)
    st.session_state.max_tokens = st.slider(
        "üìè –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞",
        min_value=256,
        max_value=MODEL_CONTEXT_TOKENS,
        value=st.session_state.max_tokens,
        step=256,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ *–æ—Ç–≤–µ—Ç–µ*. –£—á—Ç–∏, —á—Ç–æ input + output ‚â§ 2–ú."
    )

    # temperature
    st.session_state.temperature = st.slider(
        "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (temperature)",
        min_value=0.0,
        max_value=1.5,
        value=st.session_state.temperature,
        step=0.05,
        help="0.0 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–µ/–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, 1.5 ‚Äî –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ."
    )

    # —Ä–µ–∂–∏–º –∏—Å—Ç–æ—Ä–∏–∏
    st.session_state.use_full_history = st.checkbox(
        "üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
        value=st.session_state.use_full_history
    )
    if not st.session_state.use_full_history:
        st.session_state.limit_messages = st.number_input(
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é)",
            min_value=1, max_value=5000, value=st.session_state.limit_messages
        )

    st.markdown("---")
    st.subheader("–§–∞–π–ª—ã")
    st.write("–ó–∞–≥—Ä—É–∂–∞–π —Ñ–∞–π–ª—ã ‚Äî –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –≤–∫–ª—é—á–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")

    uploaded_files = st.file_uploader(
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã (multi)",
        accept_multiple_files=True,
        type=['txt', 'pdf', 'jpg', 'jpeg', 'png', 'csv', 'json', 'py', 'md', 'log'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: —Ç–µ–∫—Å—Ç, PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, CSV, JSON, Python, Markdown. –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 50MB –Ω–∞ —Ñ–∞–π–ª (—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–µ –±—É–¥–µ–º)."
    )

    if uploaded_files:
        for uf in uploaded_files:
            try:
                bytes_data = safe_read_bytes(uf)
                info = process_file_bytes(uf.name, bytes_data)
                # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç —Ñ–∞–π–ª–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                if not any(f["name"] == info["name"] for f in st.session_state.files):
                    info["include"] = True
                    st.session_state.files.append(info)
                    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω: {info['name']}")
                else:
                    st.warning(f"–§–∞–π–ª {info['name']} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {uf.name}: {e}")

    # –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –º–∞–∫–µ—Ç–æ–º –≤–∫–ª—é—á–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    if st.session_state.files:
        for i, f in enumerate(st.session_state.files):
            cols = st.columns([6, 1, 1])
            with cols[0]:
                st.markdown(f"**{f['name']}** ({f['type']}, {f['size']} bytes)")
                st.text_area(f"preview_{i}", value=f.get("preview", "")[:2000], height=80, key=f"preview_{i}")
            with cols[1]:
                inc = st.checkbox("–í–∫–ª—é—á–∏—Ç—å", value=f.get("include", True), key=f"inc_{i}")
                st.session_state.files[i]["include"] = inc
                if inc and f["name"] not in st.session_state.include_files:
                    st.session_state.include_files.append(f["name"])
                if not inc and f["name"] in st.session_state.include_files:
                    st.session_state.include_files.remove(f["name"])
            with cols[2]:
                if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_{i}"):
                    st.session_state.files.pop(i)
                    # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å include_files
                    st.session_state.include_files = [n for n in st.session_state.include_files if n != f["name"]]
                    st.experimental_rerun()

    st.markdown("---")
    st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    st.session_state.system_prompt = st.text_area("System prompt (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ system message)", value=st.session_state.system_prompt, height=120)

    st.markdown("---")
    st.write("–≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç —á–∞—Ç–∞")
    if st.button("üîÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç (JSON)"):
        data = {
            "messages": st.session_state.messages,
            "files": [{k: v for k, v in f.items() if k != "content"} for f in st.session_state.files],
            "system_prompt": st.session_state.system_prompt
        }
        st.download_button("–°–∫–∞—á–∞—Ç—å JSON", data=json.dumps(data, ensure_ascii=False, indent=2), file_name="chat_export.json")

    uploaded_chat = st.file_uploader("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç (JSON)", type=["json"], key="upload_chat")
    if uploaded_chat:
        try:
            raw = safe_read_bytes(uploaded_chat).decode("utf-8", errors="ignore")
            obj = json.loads(raw)
            if "messages" in obj:
                st.session_state.messages = obj["messages"]
            if "files" in obj and isinstance(obj["files"], list):
                # –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–æ–≤ ‚Äî –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                for imported in obj["files"]:
                    if not any(f["name"] == imported.get("name") for f in st.session_state.files):
                        # –¥–æ–±–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É –±–µ–∑ content (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤–Ω–æ–≤—å)
                        stub = {
                            "name": imported.get("name"),
                            "content": imported.get("content", f"[content not available for {imported.get('name')}]"),
                            "type": imported.get("type", "unknown"),
                            "preview": imported.get("preview", ""),
                            "size": imported.get("size", 0),
                            "include": False
                        }
                        st.session_state.files.append(stub)
                st.success("–ß–∞—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ).")
        except Exception as e:
            st.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: " + str(e))

# =========================
# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (OpenRouter)
# =========================
def get_client(api_key: str) -> Optional[OpenAI]:
    if not api_key:
        return None
    try:
        return OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
        return None

client = get_client(st.session_state.api_key)
if client is None:
    st.warning("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OPENROUTER_API_KEY –≤ —Å–∞–π–¥–±–∞—Ä–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –º–æ–¥–µ–ª–∏.")

# =========================
# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ‚Äî —á–∞—Ç
# =========================
st.title("ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç (Sonoma) ‚Äî —É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
st.caption("–ú–æ–¥–µ–ª—å: openrouter/sonoma-sky-alpha ‚Äî –æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ 2M —Ç–æ–∫–µ–Ω–æ–≤. –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–µ–≤–∞.")

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º: –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏, —ç–∫—Å–ø–æ—Ä—Ç
top_cols = st.columns([1, 1, 4])
with top_cols[0]:
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        st.session_state.messages = []
        st.experimental_rerun()
with top_cols[1]:
    if st.button("üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å —Ñ–∞–π–ª—ã"):
        st.session_state.files = []
        st.session_state.include_files = []
        st.experimental_rerun()
with top_cols[2]:
    # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ä–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    api_messages_preview = build_api_messages(
        st.session_state.system_prompt,
        st.session_state.messages,
        st.session_state.files,
        st.session_state.include_files,
        st.session_state.use_full_history,
        st.session_state.limit_messages
    )
    approx_tokens = estimate_total_tokens(api_messages_preview)
    st.markdown(f"**–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:** ~**{approx_tokens:,}** —Ç–æ–∫–µ–Ω–æ–≤.  (–º–∞–∫—Å {MODEL_CONTEXT_TOKENS:,})")
    if approx_tokens + st.session_state.max_tokens > MODEL_CONTEXT_TOKENS:
        st.error("–í–Ω–∏–º–∞–Ω–∏–µ: –≤—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç + –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞—é—Ç –æ–∫–Ω–æ –º–æ–¥–µ–ª–∏ (2M). –£–º–µ–Ω—å—à–∏ –∏—Å—Ç–æ—Ä–∏—é/—Ñ–∞–π–ª—ã –∏–ª–∏ max_tokens.")

# –í—ã–≤–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∏–¥–µ —á–∞—Ç–∞
chat_box = st.container()
with chat_box:
    for msg in st.session_state.messages:
        if msg["role"] == "user":
            with st.chat_message("user"):
                st.markdown(msg["content"])
        else:
            with st.chat_message("assistant"):
                st.markdown(msg["content"])

# =========================
# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# =========================
user_prompt = st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)...")
if user_prompt:
    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "user", "content": user_prompt, "ts": time.time()})
    # –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ä–∞–∑—É –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    with st.chat_message("user"):
        st.markdown(user_prompt)

    # —Å–æ–∑–¥–∞—ë–º placeholder –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    with st.chat_message("assistant"):
        placeholder = st.empty()
        placeholder.markdown("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å...")

        # –°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
        api_messages = build_api_messages(
            st.session_state.system_prompt,
            st.session_state.messages,
            st.session_state.files,
            st.session_state.include_files,
            st.session_state.use_full_history,
            st.session_state.limit_messages
        )

        # –û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        approx_in_tokens = estimate_total_tokens(api_messages)
        if approx_in_tokens + st.session_state.max_tokens > MODEL_CONTEXT_TOKENS:
            # –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å: –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é ‚Äî —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ limit_messages
            if st.session_state.use_full_history:
                # –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                placeholder.markdown(
                    "‚ö†Ô∏è –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–≤–º–µ—Å—Ç–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–∫–Ω–æ –º–æ–¥–µ–ª–∏ –≤ 2M —Ç–æ–∫–µ–Ω–æ–≤). "
                    "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∏ '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é' –≤ —Å–∞–π–¥–±–∞—Ä–µ –∏–ª–∏ —É–º–µ–Ω—å—à—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤/–∏—Ö –≤–∫–ª—é—á–µ–Ω–∏–µ."
                )
                st.session_state.messages.append({"role": "assistant", "content": "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –º–æ–¥–µ–ª–∏."})
            else:
                # –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ–ª–æ–≤–∏–Ω—ã limit_messages
                reduced = st.session_state.limit_messages // 2
                placeholder.markdown(
                    f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {reduced} —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä—è—é –ø–æ–ø—ã—Ç–∫—É..."
                )
                api_messages = build_api_messages(
                    st.session_state.system_prompt,
                    st.session_state.messages,
                    st.session_state.files,
                    st.session_state.include_files,
                    False,
                    reduced
                )
                approx_in_tokens = estimate_total_tokens(api_messages)
                # –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Äî –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è
                if approx_in_tokens + st.session_state.max_tokens > MODEL_CONTEXT_TOKENS:
                    placeholder.markdown(
                        "‚ùå –í—Å—ë –µ—â—ë –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç. –£–º–µ–Ω—å—à–∏ —á–∏—Å–ª–æ —Ñ–∞–π–ª–æ–≤, –æ—Ç–∫–ª—é—á–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ª–∏–±–æ —É–º–µ–Ω—å—à–∞–π max_tokens."
                    )
                    st.session_state.messages.append({"role": "assistant", "content": "‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –º–æ–¥–µ–ª–∏."})
                    st.experimental_rerun()

        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if client is None:
            placeholder.markdown("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: —É–∫–∞–∂–∏—Ç–µ OPENROUTER_API_KEY –≤ —Å–∞–π–¥–±–∞—Ä–µ.")
            st.session_state.messages.append({"role": "assistant", "content": "‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á."})
        else:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                resp = client.chat.completions.create(
                    model=MODEL_NAME,
                    messages=api_messages,
                    temperature=float(st.session_state.temperature),
                    max_tokens=int(st.session_state.max_tokens)
                )
                # –ë–µ—Ä—ë–º –æ—Ç–≤–µ—Ç
                # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: completion.choices[0].message.content
                reply = ""
                try:
                    reply = resp.choices[0].message.content
                except Exception:
                    # –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–Ω–∞—è
                    reply = str(resp)
                # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                placeholder.markdown(reply)
                st.session_state.messages.append({"role": "assistant", "content": reply, "ts": time.time()})
            except Exception as e:
                err_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–æ–¥–µ–ª–∏: {e}"
                placeholder.markdown(err_text)
                st.session_state.messages.append({"role": "assistant", "content": err_text})

# =========================
# –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å: —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
# =========================
st.markdown("---")
bot_cols = st.columns([1, 1, 1, 2])
with bot_cols[0]:
    if st.button("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç"):
        # –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ—Å–ª–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        last_user = None
        for m in reversed(st.session_state.messages):
            if m["role"] == "user":
                last_user = m["content"]
                break
        if last_user:
            # —É–¥–∞–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            # –¥–æ–±–∞–≤–∏–º –∫–æ–ø–∏—é user –≤ –∫–æ–Ω–µ—Ü –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—É—Ç—å: –∏–º–∏—Ç–∏—Ä—É–µ–º –≤–≤–æ–¥)
            st.session_state.messages.append({"role": "user", "content": last_user, "ts": time.time()})
            st.experimental_rerun()
        else:
            st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞.")
with bot_cols[1]:
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Ç (TXT)"):
        buf = io.StringIO()
        for m in st.session_state.messages:
            role = "User" if m["role"] == "user" else "Assistant"
            ts = m.get("ts", "")
            buf.write(f"{role} ({ts}):\n{m['content']}\n\n")
        st.download_button("–°–∫–∞—á–∞—Ç—å TXT", data=buf.getvalue(), file_name="chat.txt", mime="text/plain")
with bot_cols[2]:
    if st.button("üì• –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π"):
        if st.session_state.messages:
            st.session_state.messages.pop()
            st.experimental_rerun()
with bot_cols[3]:
    st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ / –ø–æ–¥—Å–∫–∞–∑–∫–∏**")
    st.write(
        " - –ú–æ–¥–µ–ª—å: openrouter/sonoma-sky-alpha\n"
        " - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ 2M —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)\n"
        " - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç—ã –∫–∞–∂—É—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏/–∫–æ—Ä–æ—Ç–∫–∏–º–∏ ‚Äî –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π Max tokens –∏ Temperature.\n"
        " - –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á–∞–π –∏—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—á–µ–∫–±–æ–∫—Å '–í–∫–ª—é—á–∏—Ç—å' –≤ —Å–∞–π–¥–±–∞—Ä–µ)."
    )

# =========================
# Footer: –ø–æ–¥—Å–∫–∞–∑–∫–∏
# =========================
st.markdown("---")
st.caption("–°–æ–≤–µ—Ç: –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –±–æ–ª—å—à–∏–µ PDF/CSV/JSON, –≤–∫–ª—é—á–∞–π –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî –∏–Ω–∞—á–µ —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä—ë–º —Ç–µ–∫—Å—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –æ–∫–Ω–æ –º–æ–¥–µ–ª–∏.")

