import streamlit as st
from openai import OpenAI
import io
from PyPDF2 import PdfReader
from PIL import Image
import pandas as pd
import mimetypes
import json
from typing import List, Dict, Any, Optional
import time
import base64
import os

# =========================
# –ö–æ–Ω—Ñ–∏–≥–∏
# =========================
MODEL_NAME = "openrouter/sonoma-sky-alpha"
MODEL_CONTEXT_TOKENS = 2_000_000  # –æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–æ–¥–µ–ª–∏ (–≤ —Ç–æ–∫–µ–Ω–∞—Ö) ‚Äî —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
DEFAULT_MAX_TOKENS_RESPONSE = 200000
DEFAULT_TEMPERATURE = 0.7

# =========================
# –£—Ç–∏–ª–∏—Ç—ã
# =========================
def approx_tokens_from_text(text: str) -> int:
    """
    –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ.
    –ü—Ä–∞–≤–∏–ª–æ: ~4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –∏–ª–∏ ~1 token = 4 —Å–∏–º–≤–æ–ª–∞ (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ).
    –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —Ç–æ–∫–µ–Ω ~ 4 –±–∞–π—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤ ASCII.
    –≠—Ç–æ **–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ**, –Ω–æ –¥–∞—ë—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ.
    """
    if not text:
        return 0
    # —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã (Unicode) –º–æ–≥—É—Ç –∑–∞–Ω–∏–º–∞—Ç—å –±–æ–ª—å—à–µ –±–∞–π—Ç;
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ utf-8 –¥–ª–∏–Ω—É –≤ –±–∞–π—Ç–∞—Ö
    b = text.encode("utf-8")
    return max(1, int(len(b) / 4))

import re

def render_message(role: str, content: str):
    """
    –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞ (user/assistant).
    –ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏ –∫–æ–¥–∞, –≤—ã–≤–æ–¥–∏–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    bg_color = "#f0f2f6" if role == "user" else "#e8f5e9"  # —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è user/assistant

    with st.container():
        st.markdown(
            f"""
            <div style="padding: 10px; border-radius: 8px; background-color: {bg_color}; margin-bottom: 10px;">
            <b>{'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' if role == 'user' else 'ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}</b>
            </div>
            """,
            unsafe_allow_html=True
        )

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –±–ª–æ–∫–∏: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–æ–¥
        code_pattern = r"```([\w]*)\n(.*?)```"
        parts = re.split(code_pattern, content, flags=re.DOTALL)

        # parts –∏–¥—ë—Ç –∫–∞–∫ [—Ç–µ–∫—Å—Ç, lang, code, —Ç–µ–∫—Å—Ç, lang, code, ...]
        i = 0
        while i < len(parts):
            if i + 2 < len(parts) and parts[i+1] != "":
                # –≠—Ç–æ –±–ª–æ–∫ –∫–æ–¥–∞
                lang = parts[i+1]
                code = parts[i+2]
                if parts[i].strip():
                    st.markdown(parts[i])  # —Ç–µ–∫—Å—Ç –¥–æ –∫–æ–¥–∞
                st.code(code, language=lang if lang else None)
                i += 3
            else:
                if parts[i].strip():
                    st.markdown(parts[i])
                i += 1

        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        st.button(
            "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
            key=f"copy_{role}_{hash(content)}",
            on_click=lambda c=content: st.session_state.update({"_clipboard": c}),
            use_container_width=True
        )


def safe_read_bytes(uploaded_file) -> bytes:
    uploaded_file.seek(0)
    return uploaded_file.read()

def text_download_link(text: str, filename: str, label: str = "–°–∫–∞—á–∞—Ç—å"):
    b = text.encode("utf-8")
    href = f"data:file/txt;base64,{base64.b64encode(b).decode()}"
    st.markdown(f"[{label}]({href})", unsafe_allow_html=True)

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–∏)
# =========================
@st.cache_data
def process_file_bytes(name: str, file_bytes: bytes) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ –±–∞–π—Ç–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    {
        "name": str,
        "content": str,  # —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        "type": str,     # csv, pdf, image, txt, json, py, unknown
        "preview": str,  # –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–∫–æ—Ä–æ—Ç–∫–∏–π)
        "size": int
    }
    """
    mime_type, _ = mimetypes.guess_type(name)
    extension = os.path.splitext(name)[1].lower()
    file_type = "unknown"
    content = ""
    preview = ""
    size = len(file_bytes)

    try:
        if extension in [".jpg", ".jpeg", ".png", ".bmp", ".gif", ".webp"]:
            file_type = "image"
            try:
                img = Image.open(io.BytesIO(file_bytes))
                content = f"[Image {name} ‚Äî {img.size[0]}x{img.size[1]} px]"
                preview = content
            except Exception as e:
                content = f"[Image {name} ‚Äî unable to open: {e}]"
                preview = content

        elif extension == ".pdf":
            file_type = "pdf"
            try:
                reader = PdfReader(io.BytesIO(file_bytes))
                text_parts = []
                for page in reader.pages:
                    page_text = page.extract_text() or ""
                    text_parts.append(page_text)
                text = "\n".join(text_parts)
                content = text
                preview = text[:1000] + ("..." if len(text) > 1000 else "")
            except Exception as e:
                content = f"[PDF {name} ‚Äî error extracting text: {e}]"
                preview = content

        elif extension in [".txt", ".py", ".md", ".log"]:
            file_type = "text"
            content = file_bytes.decode("utf-8", errors="ignore")
            preview = content[:1000] + ("..." if len(content) > 1000 else "")

        elif extension == ".csv":
            file_type = "csv"
            text = file_bytes.decode("utf-8", errors="ignore")
            content = text
            try:
                df = pd.read_csv(io.StringIO(text))
                preview = f"CSV {name}: {len(df)} rows, columns: {list(df.columns)}\n" + df.head(5).to_csv(index=False)
            except Exception:
                preview = text[:1000] + ("..." if len(text) > 1000 else "")

        elif extension == ".json":
            file_type = "json"
            text = file_bytes.decode("utf-8", errors="ignore")
            content = text
            try:
                data = json.loads(text)
                preview = json.dumps(data, ensure_ascii=False, indent=2)[:1000] + ("..." if len(text) > 1000 else "")
            except Exception:
                preview = text[:1000] + ("..." if len(text) > 1000 else "")

        else:
            # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
            try:
                text = file_bytes.decode("utf-8", errors="ignore")
                file_type = "text"
                content = text
                preview = text[:1000] + ("..." if len(text) > 1000 else "")
            except:
                file_type = "binary"
                content = f"[–ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª {name}, —Ä–∞–∑–º–µ—Ä {size} –±–∞–π—Ç]"
                preview = content

    except Exception as e:
        file_type = "error"
        content = f"[–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {name}: {e}]"
        preview = content

    return {
        "name": name,
        "content": content,
        "type": file_type,
        "preview": preview,
        "size": size
    }

# =========================
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API
# =========================
def build_api_messages(system_prompt: str,
                       chat_messages: List[Dict[str, str]],
                       files: List[Dict[str, Any]],
                       include_files: List[str],
                       use_full_history: bool,
                       limit_messages: int) -> List[Dict[str, str]]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (system + user/assistant) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API.
    include_files ‚Äî —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∫–ª—é—á–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
    use_full_history ‚Äî –µ—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é; –∏–Ω–∞—á–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit_messages.
    """
    messages = [{"role": "system", "content": system_prompt}]

    # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ user-—Å–æ–æ–±—â–µ–Ω–∏—è (–≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏)
    for f in files:
        if f["name"] in include_files:
            # –ø–æ–º–µ—Å—Ç–∏–º —Å–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫—É—é –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∑–∞—Ç–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            preview = f.get("preview", "")
            # –ü—Ä–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–º —Ä–∞–∑–º–µ—Ä–µ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ preview –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            messages.append({
                "role": "user",
                "content": f"[–§–∞–π–ª: {f['name']} (type={f['type']}, size={f['size']} bytes)]\nPreview:\n{preview}\n\nFull content:\n{f['content']}"
            })

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    hist = chat_messages if use_full_history else chat_messages[-limit_messages:]
    for m in hist:
        messages.append({"role": m["role"], "content": m["content"]})

    return messages

def estimate_total_tokens(messages: List[Dict[str, str]]) -> int:
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: —Å—É–º–º–∏—Ä—É–µ–º –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    total = 0
    for m in messages:
        total += approx_tokens_from_text(m.get("content", ""))
    # –ø–ª—é—Å –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    total += int(len(messages) * 3)
    return total

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Streamlit session_state
# =========================
st.set_page_config(page_title="ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç (Sonoma)", page_icon="ü§ñ", layout="wide")

if "messages" not in st.session_state:
    st.session_state.messages = []  # —Å–ø–∏—Å–æ–∫ dict {"role": "user"/"assistant", "content": "...", "ts": ...}
if "files" not in st.session_state:
    st.session_state.files = []  # —Å–ø–∏—Å–æ–∫ dict –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö process_file_bytes + {"include": True}
if "max_tokens" not in st.session_state:
    st.session_state.max_tokens = DEFAULT_MAX_TOKENS_RESPONSE
if "temperature" not in st.session_state:
    st.session_state.temperature = DEFAULT_TEMPERATURE
if "system_prompt" not in st.session_state:
    st.session_state.system_prompt = (
        "You are Sonoma, an experienced fullstack Python developer. "
        "You answer Russian or English requests with code, instructions, or file analysis. "
        "Be concise and provide examples when needed."
    )
if "use_full_history" not in st.session_state:
    st.session_state.use_full_history = True
if "limit_messages" not in st.session_state:
    st.session_state.limit_messages = 50
if "include_files" not in st.session_state:
    st.session_state.include_files = []  # –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
if "api_key" not in st.session_state:
    st.session_state.api_key = st.secrets.get("OPENROUTER_API_KEY") or ""

# =========================
# Sidebar ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤—Å–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—ã—Ö –±–ª–æ–∫–∞—Ö)
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # --- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    st.markdown(f"**–ú–æ–¥–µ–ª—å:** `{MODEL_NAME}`")
    st.caption(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –¥–æ **{MODEL_CONTEXT_TOKENS:,}** —Ç–æ–∫–µ–Ω–æ–≤")

    col1, col2 = st.columns(2)
    with col1:
        st.session_state.max_tokens = st.number_input(
            "üìè Max tokens",
            min_value=256,
            max_value=MODEL_CONTEXT_TOKENS,
            value=st.session_state.max_tokens,
            step=256,
        )
    with col2:
        st.session_state.temperature = st.slider(
            "üé® Temp",
            min_value=0.0,
            max_value=1.5,
            value=st.session_state.temperature,
            step=0.05,
        )

    colh1, colh2 = st.columns([3, 2])
    with colh1:
        st.session_state.use_full_history = st.checkbox(
            "üìö –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", value=st.session_state.use_full_history
        )
    with colh2:
        if not st.session_state.use_full_history:
            st.session_state.limit_messages = st.number_input(
                "N —Å–æ–æ–±—â–µ–Ω–∏–π",
                min_value=1,
                max_value=5000,
                value=st.session_state.limit_messages,
            )

    st.markdown("---")

    # --- –§–∞–π–ª—ã ---
    with st.expander("üìÇ –§–∞–π–ª—ã", expanded=False):
        uploaded_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã",
            type=['txt','pdf','jpg','jpeg','png','csv','json','py','md','log'],
            accept_multiple_files=True,
        )
        if uploaded_files:
            for uf in uploaded_files:
                try:
                    bytes_data = safe_read_bytes(uf)
                    info = process_file_bytes(uf.name, bytes_data)
                    if not any(f["name"] == info["name"] for f in st.session_state.files):
                        info["include"] = True
                        st.session_state.files.append(info)
                        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω: {info['name']}")
                    else:
                        st.warning(f"–§–∞–π–ª {info['name']} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {uf.name}: {e}")

        for i, f in enumerate(st.session_state.files):
            with st.expander(f"üìÑ {f['name']} ({f['type']}, {f['size']}b)"):
                st.checkbox(
                    "–í–∫–ª—é—á–∏—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                    value=f.get("include", True),
                    key=f"inc_{i}"
                )
                st.text_area(
                    "preview",
                    value=f.get("preview", "")[:800],
                    height=100,
                    label_visibility="collapsed"
                )
                if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"del_{i}"):
                    st.session_state.files.pop(i)
                    st.session_state.include_files = [
                        n for n in st.session_state.include_files if n != f["name"]
                    ]
                    st.rerun()

    # --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
    with st.expander("üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", expanded=False):
        st.session_state.system_prompt = st.text_area(
            "System prompt",
            value=st.session_state.system_prompt,
            height=120,
        )

    # --- –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç ---
    with st.expander("üíæ –≠–∫—Å–ø–æ—Ä—Ç / –ò–º–ø–æ—Ä—Ç", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç JSON"):
                export_data = {
                    "messages": st.session_state.messages,
                    "files": [{k: v for k, v in f.items() if k != "content"} for f in st.session_state.files],
                    "system_prompt": st.session_state.system_prompt,
                }
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å",
                    data=json.dumps(export_data, ensure_ascii=False, indent=2),
                    file_name="chat.json",
                    mime="application/json",
                )
        with col2:
            uploaded_chat = st.file_uploader("–ò–º–ø–æ—Ä—Ç JSON", type="json")
            if uploaded_chat:
                try:
                    raw = safe_read_bytes(uploaded_chat).decode("utf-8", errors="ignore")
                    obj = json.loads(raw)
                    if "messages" in obj:
                        st.session_state.messages = obj["messages"]
                    if "files" in obj and isinstance(obj["files"], list):
                        for imported in obj["files"]:
                            if not any(f["name"] == imported.get("name") for f in st.session_state.files):
                                stub = {
                                    "name": imported.get("name"),
                                    "content": imported.get("content", f"[content not available for {imported.get('name')}]"),
                                    "type": imported.get("type", "unknown"),
                                    "preview": imported.get("preview", ""),
                                    "size": imported.get("size", 0),
                                    "include": False
                                }
                                st.session_state.files.append(stub)
                    st.success("–ß–∞—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (—Ñ–∞–π–ª—ã ‚Äî –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ).")
                    st.rerun()
                except Exception as e:
                    st.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: " + str(e))

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º ---
    with st.expander("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º", expanded=False):
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π"):
                last_user = next((m["content"] for m in reversed(st.session_state.messages) if m["role"] == "user"), None)
                if last_user:
                    st.session_state.messages.append({"role": "user", "content": last_user, "ts": time.time()})
                    st.rerun()
        with col2:
            if st.button("üì• –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π"):
                if st.session_state.messages:
                    st.session_state.messages.pop()
                    st.rerun()
        st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —á–∞—Ç", on_click=lambda: st.session_state.update({"messages": []}))
        st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", on_click=lambda: st.session_state.update({"files": [], "include_files": []}))

    # --- –ò–Ω—Ñ–æ –æ –º–æ–¥–µ–ª–∏ ---
    st.info(
        "ü§ñ **–ú–æ–¥–µ–ª—å**: openrouter/sonoma-sky-alpha\n"
        f"üìè –ö–æ–Ω—Ç–µ–∫—Å—Ç: –¥–æ {MODEL_CONTEXT_TOKENS:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
        "üìÇ –§–∞–π–ª—ã: –≤–∫–ª—é—á–∞–π –≤—ã–±–æ—Ä–æ—á–Ω–æ, —á—Ç–æ–±—ã —ç–∫–æ–Ω–æ–º–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    )


# =========================
# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (OpenRouter)
# =========================
def get_client(api_key: str) -> Optional[OpenAI]:
    if not api_key:
        return None
    try:
        return OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å OpenAI –∫–ª–∏–µ–Ω—Ç: {e}")
        return None

client = get_client(st.session_state.api_key)

# =========================
# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ‚Äî —á–∞—Ç
# =========================
st.title("ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç (Sonoma)")
st.caption("–ú–æ–¥–µ–ª—å: openrouter/sonoma-sky-alpha ‚Äî –æ–∫–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ 2M —Ç–æ–∫–µ–Ω–æ–≤. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º: –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω–æ)
top_cols = st.columns([1, 1, 4])
with top_cols[0]:
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        st.session_state.messages = []
        st.rerun()
with top_cols[1]:
    if st.button("üóëÔ∏è –°—Ç–µ—Ä–µ—Ç—å —Ñ–∞–π–ª—ã"):
        st.session_state.files = []
        st.session_state.include_files = []
        st.rerun()
with top_cols[2]:
    # –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤
    api_messages_preview = build_api_messages(
        st.session_state.system_prompt,
        st.session_state.messages,
        st.session_state.files,
        st.session_state.include_files,
        st.session_state.use_full_history,
        st.session_state.limit_messages
    )
    approx_tokens = estimate_total_tokens(api_messages_preview)
    st.markdown(f"**–¢–æ–∫–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:** ~{approx_tokens:,} (–º–∞–∫—Å. {MODEL_CONTEXT_TOKENS:,})")
    if approx_tokens + st.session_state.max_tokens > MODEL_CONTEXT_TOKENS * 1.1:
        st.error("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç + –æ—Ç–≤–µ—Ç –ø—Ä–µ–≤—ã—à–∞—é—Ç 2M —Ç–æ–∫–µ–Ω–æ–≤. –£–º–µ–Ω—å—à–∏ –∏—Å—Ç–æ—Ä–∏—é/—Ñ–∞–π–ª—ã/max_tokens.")

# –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
chat_box = st.container()
with chat_box:
    for msg in st.session_state.messages:
        render_message(msg["role"], msg["content"])


# –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
user_prompt = st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)...")
if user_prompt and user_prompt.strip():
    st.session_state.messages.append({"role": "user", "content": user_prompt, "ts": time.time()})
    with st.chat_message("user"):
        st.markdown(user_prompt)

    with st.chat_message("assistant"):
        placeholder = st.empty()
        placeholder.markdown("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å...")

        api_messages = build_api_messages(
            st.session_state.system_prompt,
            st.session_state.messages,
            st.session_state.files,
            st.session_state.include_files,
            st.session_state.use_full_history,
            st.session_state.limit_messages
        )

        approx_in_tokens = estimate_total_tokens(api_messages)
        if approx_in_tokens + st.session_state.max_tokens > MODEL_CONTEXT_TOKENS * 1.1:
            if st.session_state.use_full_history:
                placeholder.markdown(
                    "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –û—Ç–∫–ª—é—á–∏ '–í—Å—è –∏—Å—Ç–æ—Ä–∏—è' –∏–ª–∏ —É–º–µ–Ω—å—à–∏ —Ñ–∞–π–ª—ã."
                )
                st.session_state.messages.append({"role": "assistant", "content": "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç."})
            else:
                reduced = st.session_state.limit_messages // 2
                placeholder.markdown(f"‚ö†Ô∏è –û–±—Ä–µ–∑–∞—é –∏—Å—Ç–æ—Ä–∏—é –¥–æ {reduced} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                api_messages = build_api_messages(
                    st.session_state.system_prompt,
                    st.session_state.messages,
                    st.session_state.files,
                    st.session_state.include_files,
                    False,
                    reduced
                )
                approx_in_tokens = estimate_total_tokens(api_messages)
                if approx_in_tokens + st.session_state.max_tokens > MODEL_CONTEXT_TOKENS * 1.1:
                    placeholder.markdown("‚ùå –í—Å—ë –µ—â—ë –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç. –£–º–µ–Ω—å—à–∏ —Ñ–∞–π–ª—ã/max_tokens.")
                    st.session_state.messages.append({"role": "assistant", "content": "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç."})
                    st.rerun()
        else:
            try:
                resp = client.chat.completions.create(
                    model=MODEL_NAME,
                    messages=api_messages,
                    temperature=float(st.session_state.temperature),
                    max_tokens=int(st.session_state.max_tokens)
                )
                reply = resp.choices[0].message.content if resp.choices else str(resp)
                placeholder.markdown(reply)
                st.session_state.messages.append({"role": "assistant", "content": reply, "ts": time.time()})
            except Exception as e:
                err_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {e}"
                placeholder.markdown(err_text)
                st.session_state.messages.append({"role": "assistant", "content": err_text})

# Footer
st.markdown("---")
st.caption("üí° –°–æ–≤–µ—Ç: –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (PDF/CSV/JSON) –≤–∫–ª—é—á–∞–π –∏—Ö –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤.")