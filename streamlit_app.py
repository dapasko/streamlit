import streamlit as st
from openai import OpenAI
import io
from PyPDF2 import PdfReader  # –î–ª—è PDF
from PIL import Image  # –î–ª—è –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import mimetypes  # –î–ª—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
import os  # –î–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# –î–æ—Å—Ç–∞—ë–º –∫–ª—é—á –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ Streamlit Cloud
api_key = st.secrets["OPENROUTER_API_KEY"]

# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=api_key,
)

# –ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Sonoma –∫–∞–∫ fullstack Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
BASE_SYSTEM_PROMPT = {
    "role": "system",
    "content": """You are Sonoma, an experienced fullstack Python developer built by Oak AI. 
    Your users are Russian-speaking clients who may come to you with any request: from coding help (Python, Streamlit, web dev, APIs, databases) to general advice, file analysis, or everyday questions. 
    You know or can figure out answers to everything ‚Äî analyze problems logically, provide code snippets, step-by-step guides, and practical solutions. 
    Always respond in Russian if the query is in Russian; otherwise, use English. Be friendly, helpful, witty, and use emojis where appropriate. 
    Structure responses: use ```python for code blocks, bullet points or numbered lists for steps, bold for key points. 
    If a file is uploaded, analyze it as a developer: check for errors in code, suggest improvements, or summarize content. 
    For images, since you are text-based, ask the user to describe it or suggest Python code to process it (e.g., with Pillow). 
    Do not generate harmful content or role-play unless asked. You have session memory but no persistent storage."""
}

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è
THINKING_MODE_PROMPT = "Before answering, think step by step: 1) Analyze the problem or request. 2) Outline the key steps or considerations. 3) Provide a clear, detailed solution or code. This ensures thorough and accurate responses."

st.set_page_config(page_title="ü§ñ Sonoma ‚Äî Fullstack Python Dev", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ Sonoma –æ—Ç Oak AI: –¢–≤–æ–π Fullstack Python –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
st.markdown("---")
st.caption("–ü—Ä–∏–≤–µ—Ç! –Ø Sonoma, –æ–ø—ã—Ç–Ω—ã–π fullstack Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –û–±—Ä–∞—â–∞–π—Å—è —Å –ª—é–±–æ–π –ø—Ä–æ—Å—å–±–æ–π ‚Äî –æ—Ç –∫–æ–¥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ —Å–æ–≤–µ—Ç–æ–≤. –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã? –û—Ç–≤–µ—á–∞—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º! üòä")

# Sidebar –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
with st.sidebar:
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

    # –†–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è
    thinking_mode = st.checkbox("üß† –†–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è", value=False)

    # –ú–æ–¥–µ–ª—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: —Ç–æ–ª—å–∫–æ Sonoma
    st.info("üõ†Ô∏è –ú–æ–¥–µ–ª—å: openrouter/sonoma-sky-alpha (—Ç–µ–∫—Å—Ç–æ–≤–∞—è, –±–µ–∑ vision)")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª(—ã) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", accept_multiple_files=True, type=['txt', 'pdf', 'jpg', 'png', 'csv', 'json', 'py'])

    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        st.session_state.messages = [BASE_SYSTEM_PROMPT]
        st.rerun()

    if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–∞"):
        if "messages" in st.session_state and len(st.session_state.messages) > 1:
            output = io.StringIO()
            for msg in st.session_state.messages[1:]:
                if isinstance(msg["content"], str):
                    content_str = msg["content"]
                else:  # –§–∞–π–ª: —É–ø—Ä–æ—â—ë–Ω–Ω–æ
                    if "file_type" in msg:
                        content_str = f"[–§–∞–π–ª: {msg['name']} ({msg['file_type']})] {msg.get('preview', '')}"
                    else:
                        content_str = str(msg["content"])[:200] + "..."
                output.write(f"{msg['role'].title()}: {content_str}\n\n")
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –∫–∞–∫ TXT",
                data=output.getvalue(),
                file_name="sonoma_chat.txt",
                mime="text/plain"
            )
        else:
            st.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
if "messages" not in st.session_state:
    st.session_state.messages = [BASE_SYSTEM_PROMPT]

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∂–∏–º–æ–º –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è
current_system_prompt = BASE_SYSTEM_PROMPT.copy()
if thinking_mode:
    current_system_prompt["content"] += "\n\n" + THINKING_MODE_PROMPT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ —á–∞—Ç)
if uploaded_files:
    with st.chat_message("user", avatar_icon="üë§"):
        st.write("**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**")
        file_messages = []
        for uploaded_file in uploaded_files:
            file_extension = mimetypes.guess_extension(uploaded_file.type) or ''
            preview_text = ""
            content_parts = []
            file_type = "text"

            if file_extension.lower() in ['.jpg', '.jpeg', '.png', '.gif', '.bmp']:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –ø—Ä–µ–≤—å—é + –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                image = Image.open(uploaded_file)
                st.image(image, caption=uploaded_file.name, width=200)
                preview_text = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{uploaded_file.name}' (—Ä–∞–∑–º–µ—Ä: {uploaded_file.size} –±–∞–π—Ç). –û–ø–∏—à–∏ –µ–≥–æ, –∏ —è –ø–æ–º–æ–≥—É —Å Python-–∫–æ–¥–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (Pillow, OpenCV)."
                content_parts = [{"type": "text", "text": preview_text}]
                file_type = "image"

            elif file_extension.lower() == '.pdf':
                # PDF: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                reader = PdfReader(io.BytesIO(uploaded_file.read()))
                text = ""
                for page in reader.pages:
                    text += page.extract_text() + "\n"
                preview_text = text[:1000] + "... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ)"
                content_parts = [{"type": "text", "text": f"PDF '{uploaded_file.name}':\n\n{text[:4000]}..."}]
                file_type = "pdf"

            elif file_extension.lower() in ['.txt', '.csv', '.json', '.md', '.py']:
                # –¢–µ–∫—Å—Ç: —á–∏—Ç–∞–µ–º
                text = uploaded_file.read().decode("utf-8", errors="ignore")
                preview_text = text[:500] + "... (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ)"
                content_parts = [{"type": "text", "text": f"–§–∞–π–ª '{uploaded_file.name}':\n\n{text[:4000]}..."}]
                file_type = "text"

            else:
                preview_text = f"–§–∞–π–ª '{uploaded_file.name}' –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û–ø–∏—à–∏, —á—Ç–æ –≤ –Ω—ë–º."
                content_parts = [{"type": "text", "text": preview_text}]
                file_type = "other"

            st.write(f"üìÑ {uploaded_file.name} ({file_type})")
            st.write(preview_text)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
            file_msg = {
                "role": "user",
                "content": content_parts,
                "file_type": file_type,
                "name": uploaded_file.name,
                "preview": preview_text
            }
            st.session_state.messages.append(file_msg)
            file_messages.append(file_msg)

        # –ü–æ–∫–∞–∑ –≤ —á–∞—Ç–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –ø—Ä–µ–≤—å—é –≤—ã—à–µ)

# –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π)
for msg in st.session_state.messages[1:]:
    if isinstance(msg["content"], str):  # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        with st.chat_message(msg["role"], avatar_icon=("üë§" if msg["role"] == "user" else "ü§ñ")):
            st.markdown(msg["content"], unsafe_allow_html=True)
    # –§–∞–π–ª–æ–≤—ã–µ: UI –ø–æ–∫–∞–∑–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å... (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –≤ —Ñ–∞–π–ª–µ')"):
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_msg = {"role": "user", "content": prompt}
    st.session_state.messages.append(user_msg)

    with st.chat_message("user", avatar_icon="üë§"):
        st.markdown(prompt)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    with st.chat_message("assistant", avatar_icon="ü§ñ"):
        message_placeholder = st.empty()
        message_placeholder.markdown("‚è≥ –û–±–¥—É–º—ã–≤–∞—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º API-—Å–æ–æ–±—â–µ–Ω–∏—è
            api_messages = [current_system_prompt]
            for msg in st.session_state.messages[1:]:
                if isinstance(msg["content"], str):
                    api_messages.append({"role": msg["role"], "content": msg["content"]})
                else:  # –§–∞–π–ª: flatten —Ç–µ–∫—Å—Ç
                    text_content = " ".join([part["text"] for part in msg["content"] if part["type"] == "text"])
                    api_messages.append({"role": msg["role"], "content": text_content})

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
            if len(api_messages) > 21:
                api_messages = [current_system_prompt] + api_messages[-20:]

            # API-–∑–∞–ø—Ä–æ—Å: temperature –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞
            temperature = 0.3 if thinking_mode else 0.7
            completion = client.chat.completions.create(
                model="openrouter/sonoma-sky-alpha",
                messages=api_messages,
                temperature=temperature,
                max_tokens=3000,  # –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            )

            reply = completion.choices[0].message.content
            message_placeholder.markdown(reply, unsafe_allow_html=True)
            st.session_state.messages.append({"role": "assistant", "content": reply})

        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å API-–∫–ª—é—á –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å."
            message_placeholder.markdown(error_msg)
            st.session_state.messages.append({"role": "assistant", "content": error_msg})

# –û—Ç–ª–∞–¥–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if st.checkbox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏"):
    st.write(f"–†–µ–∂–∏–º –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è: {'–í–∫–ª—é—á—ë–Ω' if thinking_mode else '–í—ã–∫–ª—é—á–µ–Ω'}")
    st.write(f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(st.session_state.messages)}")