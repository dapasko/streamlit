import streamlit as st
from openai import OpenAI
import io
from PyPDF2 import PdfReader
from PIL import Image
import pandas as pd
import mimetypes
from typing import List, Dict, Any, Optional

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# =========================
st.set_page_config(page_title="ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç: Sonoma & DeepSeek")
st.caption("–û–±—Ä–∞—â–∞–π—Å—è –∫ –ª—é–±–æ–π –∏–∑ –º–æ–¥–µ–ª–µ–π. –†—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

# =========================
# –°–µ–∫—Ä–µ—Ç—ã –∏ API
# =========================
def get_client(api_key: str) -> OpenAI:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è OpenRouter."""
    return OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)

API_KEY = st.secrets.get("OPENROUTER_API_KEY")
if not API_KEY:
    st.error("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ secrets.toml.")
    st.stop()

client = get_client(API_KEY)

# =========================
# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
# =========================
SYSTEM_PROMPTS = {
    "sonoma": {
        "role": "system",
        "content": (
            "You are Sonoma, an experienced fullstack Python developer. "
            "You answer Russian or English requests with code, instructions, or file analysis."
        )
    },
    "deepseek": {
        "role": "system",
        "content": (
            "You are DeepSeek, a smart assistant. Answer clearly and concisely. "
            "Support file analysis and general knowledge."
        )
    }
}

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
# =========================
if "messages" not in st.session_state:
    st.session_state.messages = []
if "model" not in st.session_state:
    st.session_state.model = "sonoma"
if "files" not in st.session_state:
    st.session_state.files = []  # –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: [{"name": str, "content": str, "type": str, "preview": str}]

# =========================
# Sidebar: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.session_state.model = st.selectbox(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å",
        options=["sonoma", "deepseek"],
        format_func=lambda x: "Sonoma (Python Dev)" if x == "sonoma" else "DeepSeek (General AI)",
        index=0 if st.session_state.model == "sonoma" else 1
    )
    thinking_mode = st.checkbox("üß† –†–µ–∂–∏–º –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è", value=False)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader(
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", accept_multiple_files=True,
        type=['txt', 'pdf', 'jpg', 'png', 'csv', 'json', 'py'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: —Ç–µ–∫—Å—Ç, PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, CSV, JSON, Python. –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 10MB –Ω–∞ —Ñ–∞–π–ª."
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if uploaded_files:
        for uploaded_file in uploaded_files:
            if uploaded_file.size > 10 * 1024 * 1024:  # 10MB limit
                st.warning(f"‚ùå –§–∞–π–ª {uploaded_file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10MB). –ü—Ä–æ–ø—É—â–µ–Ω.")
                continue
            file_info = process_file(uploaded_file)
            if file_info:
                st.session_state.files.append(file_info)
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if st.session_state.files:
            with st.expander("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", expanded=True):
                for file_info in st.session_state.files:
                    st.write(f"**{file_info['name']}** ({file_info['type']})")
                    st.markdown(file_info['preview'][:300] + "..." if len(file_info['preview']) > 300 else file_info['preview'])

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.messages = []
            st.rerun()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.rerun() –≤–º–µ—Å—Ç–æ experimental_rerun() (Streamlit >=1.28)
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã"):
            st.session_state.files = []
            st.rerun()

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    if st.session_state.messages:
        if st.button("üì§ –°–∫–∞—á–∞—Ç—å —á–∞—Ç"):
            output = io.StringIO()
            for msg in st.session_state.messages:
                role = "User" if msg["role"] == "user" else "Assistant"
                output.write(f"{role}: {msg['content']}\n\n")
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å TXT",
                data=output.getvalue(),
                file_name="chat.txt",
                mime="text/plain"
            )
    else:
        st.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

# =========================
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
# =========================
@st.cache_data  # –ö—ç—à–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
def process_file(uploaded_file) -> Optional[Dict[str, Any]]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π bytes –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    file_bytes = uploaded_file.read()
    uploaded_file.seek(0)  # –°–±—Ä–æ—Å –∫—É—Ä—Å–æ—Ä–∞, –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ bytes, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö

    extension = mimetypes.guess_extension(uploaded_file.type) or ''
    file_type = uploaded_file.type or extension[1:]  # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É

    if extension in ['.jpg', '.jpeg', '.png', '.bmp', '.gif']:
        try:
            img = Image.open(io.BytesIO(file_bytes))
            st.image(img, caption=uploaded_file.name, width=200, use_column_width=False)
            preview = f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {uploaded_file.name}, —Ä–∞–∑–º–µ—Ä {len(file_bytes)} –±–∞–π—Ç]"
            return {
                "name": uploaded_file.name,