import streamlit as st
import requests
import re
import time
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed

# ======================
# –ö–æ–Ω—Ñ–∏–≥–∏
# ======================
MODEL = "x-ai/grok-4-fast:free"
API_KEY = st.secrets["OPENROUTER_API_KEY"]
API_URL = "https://openrouter.ai/api/v1/chat/completions"

BATCH_SIZE = 100      # —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤)
MAX_WORKERS = 3       # —Å–∫–æ–ª—å–∫–æ –±–∞—Ç—á–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

# –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
history = {}


# ======================
# –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
# ======================
def clean_translation(text: str) -> str:
    lines = text.splitlines()
    cleaned = []
    for line in lines:
        if line.strip() in cleaned:
            continue

        # –ü–æ–¥–º–µ–Ω—ã —Ç–µ—Ä–º–∏–Ω–æ–≤
        line = line.replace("–∞–≤—Ç–æceph", "–∞–≤—Ç–æ–∫–µ—Ñ")
        line = line.replace("Confirm", "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        line = line.replace("Epic.", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ.")
        line = re.sub(r"\b—Ä–≤–µ–Ω–∏–µ\b", "—Ñ–µ—Ä–≤–æ—Ä", line)

        cleaned.append(line)

    for l in cleaned:
        if re.search(r"[A-Za-z]", l) and not l.startswith("l_russian"):
            print("‚ö†Ô∏è –û—Å—Ç–∞–ª—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:", l)

    return "\n".join(cleaned)


# ======================
# API –≤—ã–∑–æ–≤
# ======================
def call_model(batch_lines):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞—Ç—á–∞ –≤ –º–æ–¥–µ–ª—å"""
    messages = [
        {"role": "system", "content": "–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è Crusader Kings 3. "
                                      "–ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤ –∫–∞–≤—ã—á–∫–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è—è —Ñ–æ—Ä–º–∞—Ç YAML. "
                                      "–ù–µ –º–µ–Ω—è–π –∫–ª—é—á–∏, –Ω–µ —É–±–∏—Ä–∞–π :0, —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫. "
                                      "–ò—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ç–æ—Ä–∏–∫–æ-–ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É: –∞–≤—Ç–æ–∫–µ—Ñ–∞–ª–∏—è, –ø–∞—Ç—Ä–∏–∞—Ä—Ö–∞—Ç, –µ—Ä–µ—Å—å, —Ñ–µ—Ä–≤–æ—Ä. "
                                      "Confirm ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, Epic. ‚Üí –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ."},
        {"role": "user", "content": "\n".join(batch_lines)}
    ]

    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "http://localhost:8501",
        "X-Title": "CK3 Mod Translator"
    }

    data = {
        "model": MODEL,
        "messages": messages,
        "temperature": 0.2,
        "max_tokens": 20000
    }

    for attempt in range(3):
        try:
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á ({len(batch_lines)} —Å—Ç—Ä–æ–∫), –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}")
            r = requests.post(API_URL, headers=headers, json=data, timeout=90)
            r.raise_for_status()
            content = r.json()["choices"][0]["message"]["content"]
            print("‚úÖ –ë–∞—Ç—á –ø–µ—Ä–µ–≤–µ–¥—ë–Ω")
            return content.splitlines()
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)
            time.sleep(2 * (attempt+1))
            if attempt == 2:
                raise e
    return []


# ======================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
# ======================
def translate_file(filename, content):
    lines = content.splitlines()
    file_key = filename
    if file_key not in history:
        history[file_key] = {"done_batches": 0, "translated": []}

    total_batches = (len(lines) + BATCH_SIZE - 1) // BATCH_SIZE
    st.info(f"–í—Å–µ–≥–æ –±–∞—Ç—á–µ–π: {total_batches}")

    progress = st.progress(0)
    log_area = st.empty()

    batches = []
    for batch_idx in range(total_batches):
        start = batch_idx * BATCH_SIZE
        end = min((batch_idx + 1) * BATCH_SIZE, len(lines))
        batches.append((batch_idx, lines[start:end]))

    results = [None] * len(batches)

    # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞—Ç—á–µ–π
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        future_to_idx = {executor.submit(call_model, b[1]): b[0] for b in batches}
        done_count = 0
        for future in as_completed(future_to_idx):
            idx = future_to_idx[future]
            try:
                translated_batch = future.result()
                results[idx] = translated_batch
                log_area.text(f"‚úÖ –ë–∞—Ç—á {idx+1}/{total_batches} –≥–æ—Ç–æ–≤")
            except Exception as e:
                log_area.text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ {idx+1}: {e}")
                results[idx] = batches[idx][1]  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª

            done_count += 1
            progress.progress(done_count / total_batches)

    # —Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –æ–±—Ä–∞—Ç–Ω–æ
    translated = []
    for batch_lines in results:
        translated.extend(batch_lines)

    final_text = "\n".join(translated)
    final_text = clean_translation(final_text)
    return final_text


# ======================
# Streamlit UI
# ======================
st.set_page_config(page_title="CK3 Translator", layout="wide")
st.title("üéÆ Crusader Kings III Translator (–±–∞—Ç—á–∏ + –ø–∞—Ä–∞–ª–ª–µ–ª—å + –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞)")

uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .yml —Ñ–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏", type=["yml"])

if uploaded and st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"):
    text = uploaded.read().decode("utf-8", errors="replace")
    st.info("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥...")

    translated = translate_file(uploaded.name, text)

    st.success("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤!")

    out_name = "l_russian_" + Path(uploaded.name).name
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª",
        data=translated.encode("utf-8"),
        file_name=out_name,
        mime="text/plain"
    )

    st.info("‚ÑπÔ∏è –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ –Ω–∏–∂–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")
