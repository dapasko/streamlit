import streamlit as st
from openai import OpenAI
import io
from PyPDF2 import PdfReader
from PIL import Image
import pandas as pd
import mimetypes

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# =========================
st.set_page_config(page_title="ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç: Sonoma & DeepSeek")
st.caption("–û–±—Ä–∞—â–∞–π—Å—è –∫ –ª—é–±–æ–π –∏–∑ –º–æ–¥–µ–ª–µ–π. –†—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

# =========================
# –°–µ–∫—Ä–µ—Ç—ã –∏ API
# =========================
def get_client(api_key: str):
    return OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)

API_KEY = st.secrets.get("OPENROUTER_API_KEY")
if not API_KEY:
    st.error("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ secrets.toml.")
    st.stop()

client = get_client(API_KEY)

# =========================
# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
# =========================
SYSTEM_PROMPTS = {
    "sonoma": {
        "role": "system",
        "content": (
            "You are Sonoma, an experienced fullstack Python developer. "
            "You answer Russian or English requests with code, instructions, or file analysis."
        )
    },
    "deepseek": {
        "role": "system",
        "content": (
            "You are DeepSeek, a smart assistant. Answer clearly and concisely. "
            "Support file analysis and general knowledge."
        )
    }
}

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
# =========================
if "messages" not in st.session_state:
    st.session_state.messages = []
if "model" not in st.session_state:
    st.session_state.model = "sonoma"

# =========================
# Sidebar: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.session_state.model = st.selectbox(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å",
        options=["sonoma", "deepseek"],
        format_func=lambda x: "Sonoma (Python Dev)" if x == "sonoma" else "DeepSeek (General AI)"
    )
    thinking_mode = st.checkbox("üß† –†–µ–∂–∏–º –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è", value=False)
    uploaded_files = st.file_uploader(
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", accept_multiple_files=True,
        type=['txt', 'pdf', 'jpg', 'png', 'csv', 'json', 'py']
    )
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
        st.session_state.messages = []
        st.experimental_rerun()
    if st.button("üì§ –°–∫–∞—á–∞—Ç—å —á–∞—Ç"):
        if st.session_state.messages:
            output = io.StringIO()
            for msg in st.session_state.messages:
                output.write(f"{msg['role'].title()}: {msg['content']}\n\n")
            st.download_button("–°–∫–∞—á–∞—Ç—å TXT", data=output.getvalue(), file_name="chat.txt")
        else:
            st.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

# =========================
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
# =========================
def process_file(uploaded_file):
    extension = mimetypes.guess_extension(uploaded_file.type) or ''
    if extension in ['.jpg', '.jpeg', '.png', '.bmp', '.gif']:
        img = Image.open(uploaded_file)
        st.image(img, caption=uploaded_file.name, width=200)
        return f"[Image file: {uploaded_file.name}, size {uploaded_file.size} bytes]"
    elif extension == '.pdf':
        reader = PdfReader(io.BytesIO(uploaded_file.read()))
        text = ""
        for page in reader.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"
        preview = text[:5000] + "..." if len(text) > 5000 else text
        return f"[PDF file: {uploaded_file.name}]\n{preview}"
    elif extension in ['.txt', '.py', '.csv', '.json']:
        content = uploaded_file.read().decode("utf-8", errors="ignore")
        preview = content[:5000] + "..." if len(content) > 5000 else content
        return f"[File: {uploaded_file.name}]\n{preview}"
    else:
        return f"[File: {uploaded_file.name} ‚Äî unsupported type]"

# =========================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç
# =========================
if uploaded_files:
    for f in uploaded_files:
        file_msg = process_file(f)
        st.session_state.messages.append({"role": "user", "content": file_msg})

# =========================
# –í—ã–≤–æ–¥ —á–∞—Ç–∞
# =========================
for msg in st.session_state.messages:
    if msg["role"] == "user":
        with st.chat_message("user"):
            st.markdown(msg["content"])
    else:
        with st.chat_message("assistant"):
            st.markdown(msg["content"])

# =========================
# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# =========================
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # =========================
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    # =========================
    with st.chat_message("assistant"):
        placeholder = st.empty()
        placeholder.markdown("‚è≥ –û–±–¥—É–º—ã–≤–∞—é...")

        system_prompt = SYSTEM_PROMPTS[st.session_state.model].copy()
        if thinking_mode:
            system_prompt["content"] += "\nThink step by step and explain clearly."

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        api_messages = [system_prompt] + [
            {"role": m["role"], "content": m["content"]} for m in st.session_state.messages[-20:]
        ]

        try:
            completion = client.chat.completions.create(
                model="openrouter/sonoma-sky-alpha" if st.session_state.model == "sonoma" else "deepseek/deepseek-chat-v3.1:free",
                messages=api_messages,
                temperature=0.7,
                max_tokens=20000
            )
            reply = completion.choices[0].message.content
            placeholder.markdown(reply)
            st.session_state.messages.append({"role": "assistant", "content": reply})
        except Exception as e:
            placeholder.markdown(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
