import streamlit as st
from openai import OpenAI
import io
from PyPDF2 import PdfReader
from PIL import Image
import pandas as pd
import mimetypes
import json
from typing import List, Dict, Any, Optional

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# =========================
st.set_page_config(page_title="ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç", page_icon="ü§ñ", layout="wide")

st.title("ü§ñ –ú—É–ª—å—Ç–∏-–ß–∞—Ç: Sonoma & DeepSeek")
st.caption("–û–±—Ä–∞—â–∞–π—Å—è –∫ –ª—é–±–æ–π –∏–∑ –º–æ–¥–µ–ª–µ–π. –†—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã: –¥–æ 4096 –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")

# =========================
# –°–µ–∫—Ä–µ—Ç—ã –∏ API
# =========================
def get_client(api_key: str) -> OpenAI:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –¥–ª—è OpenRouter."""
    return OpenAI(base_url="https://openrouter.ai/api/v1", api_key=api_key)

API_KEY = st.secrets.get("OPENROUTER_API_KEY")
if not API_KEY:
    st.error("‚ùå API-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ OPENROUTER_API_KEY –≤ secrets.toml.")
    st.stop()

client = get_client(API_KEY)

# =========================
# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
# =========================
SYSTEM_PROMPTS = {
    "sonoma": {
        "role": "system",
        "content": (
            "You are Sonoma, an experienced fullstack Python developer. "
            "You answer Russian or English requests with code, instructions, or file analysis."
        )
    },
    "deepseek": {
        "role": "system",
        "content": (
            "You are DeepSeek, a smart assistant. Answer clearly and concisely. "
            "Support file analysis and general knowledge."
        )
    }
}

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
# =========================
if "messages" not in st.session_state:
    st.session_state.messages = []
if "model" not in st.session_state:
    st.session_state.model = "sonoma"
if "files" not in st.session_state:
    st.session_state.files = []  # [{"name": str, "content": str, "type": str, "preview": str}]
if "max_tokens" not in st.session_state:
    st.session_state.max_tokens = 4096  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º—É–º

# =========================
# Sidebar: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
# =========================
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    current_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å",
        options=["sonoma", "deepseek"],
        format_func=lambda x: "Sonoma (Python Dev)" if x == "sonoma" else "DeepSeek (General AI)",
        index=0 if st.session_state.model == "sonoma" else 1
    )
    st.session_state.model = current_model

    # –ù–æ–≤—ã–π —Å–ª–∞–π–¥–µ—Ä –¥–ª—è max_tokens
    current_max_tokens = st.slider(
        "üìè –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (500‚Äì4096)",
        min_value=500,
        max_value=4096,
        value=st.session_state.max_tokens,
        help="–ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ = –¥–ª–∏–Ω–Ω–µ–µ –æ—Ç–≤–µ—Ç, –Ω–æ –¥–æ—Ä–æ–∂–µ –∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ. –£—á–∏—Ç—ã–≤–∞–π input (–∏—Å—Ç–æ—Ä–∏—è + —Ñ–∞–π–ª—ã)."
    )
    st.session_state.max_tokens = current_max_tokens

    thinking_mode = st.checkbox("üß† –†–µ–∂–∏–º –æ–±–¥—É–º—ã–≤–∞–Ω–∏—è", value=False)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader(
        "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", accept_multiple_files=True,
        type=['txt', 'pdf', 'jpg', 'png', 'csv', 'json', 'py'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: —Ç–µ–∫—Å—Ç, PDF, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, CSV, JSON, Python. –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 10MB –Ω–∞ —Ñ–∞–π–ª."
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if uploaded_files:
        for uploaded_file in uploaded_files:
            if uploaded_file.size > 10 * 1024 * 1024:  # 10MB limit
                st.warning(f"‚ùå –§–∞–π–ª {uploaded_file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10MB). –ü—Ä–æ–ø—É—â–µ–Ω.")
                continue
            file_info = process_file(uploaded_file)
            if file_info:
                # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
                if not any(f['name'] == file_info['name'] for f in st.session_state.files):
                    st.session_state.files.append(file_info)
                    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
                else:
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª {uploaded_file.name} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if st.session_state.files:
            with st.expander("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", expanded=True):
                for file_info in st.session_state.files:
                    col1, col2 = st.columns([3, 1])
                    with col1:
                        st.write(f"**{file_info['name']}** ({file_info['type']})")
                        if file_info['type'] == 'csv':
                            # –î–ª—è CSV –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏-preview –≤ sidebar
                            try:
                                df = pd.read_csv(io.StringIO(file_info['content']))
                                st.dataframe(df.head(5), use_container_width=True, height=150)
                            except:
                                st.markdown(file_info['preview'][:200] + "...")
                        else:
                            preview_text = file_info['preview'][:300] + "..." if len(file_info['preview']) > 300 else file_info['preview']
                            st.markdown(preview_text)
                    with col2:
                        if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"del_{file_info['name']}"):
                            st.session_state.files = [f for f in st.session_state.files if f['name'] != file_info['name']]
                            st.rerun()

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.messages = []
            st.rerun()
    with col2:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã"):
            st.session_state.files = []
            st.rerun()

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    if st.session_state.messages:
        st.markdown("---")
        output = io.StringIO()
        for msg in st.session_state.messages:
            role = "User" if msg["role"] == "user" else "Assistant"
            output.write(f"{role}: {msg['content']}\n\n")
        st.download_button(
            label="üì§ –°–∫–∞—á–∞—Ç—å —á–∞—Ç (TXT)",
            data=output.getvalue(),
            file_name="chat.txt",
            mime="text/plain",
            use_container_width=True
        )
    else:
        st.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

# =========================
# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
# =========================
@st.cache_data
def process_file(uploaded_file) -> Optional[Dict[str, Any]]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π bytes –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    file_bytes = uploaded_file.read()
    uploaded_file.seek(0)  # –°–±—Ä–æ—Å –∫—É—Ä—Å–æ—Ä–∞

    mime_type = uploaded_file.type or mimetypes.guess_type(uploaded_file.name)[0] or ''
    extension = mimetypes.guess_extension(mime_type) or mimetypes.guess_extension(uploaded_file.name) or ''
    file_type = mime_type.split('/')[-1] if '/' in mime_type else extension[1:] if extension else 'unknown'

    content = ""  # –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è API (—Ç–µ–∫—Å—Ç)
    preview = f"[–§–∞–π–ª: {uploaded_file.name}, —Ç–∏–ø: {file_type}, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç]"

    try:
        if extension in ['.jpg', '.jpeg', '.png', '.bmp', '.gif']:
            img = Image.open(io.BytesIO(file_bytes))
            st.image(img, caption=uploaded_file.name, width=200, use_column_width=False)
            content = f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {uploaded_file.name}: {img.size[0]}x{img.size[1]} –ø–∏–∫—Å–µ–ª–µ–π. (–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.)"
            preview = f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {uploaded_file.name}, {img.size[0]}x{img.size[1]}, {len(file_bytes)} –±–∞–π—Ç]"

        elif extension == '.pdf':
            reader = PdfReader(io.BytesIO(file_bytes))
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
            content = text
            preview = text[:500] + "..." if len(text) > 500 else text
            preview = f"[PDF: {uploaded_file.name}]\n{preview}"

        elif extension in ['.txt', '.py']:
            content = file_bytes.decode("utf-8", errors="ignore")
            preview = content[:500] + "..." if len(content) > 500 else content
            preview = f"[–¢–µ–∫—Å—Ç: {uploaded_file.name}]\n{preview}"

        elif extension == '.csv':
            content = file_bytes.decode("utf-8", errors="ignore")
            try:
                df = pd.read_csv(io.StringIO(content))
                preview = f"CSV —Å {len(df)} —Å—Ç—Ä–æ–∫–∞–º–∏ –∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏: {list(df.columns)}. –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:\n{df.head(3).to_string()}"
            except:
                preview = content[:500] + "..."
            preview = f"[CSV: {uploaded_file.name}]\n{preview}"

        elif extension == '.json':
            content = file_bytes.decode("utf-8", errors="ignore")
            try:
                data = json.loads(content)
                preview = json.dumps(data, indent=2, ensure_ascii=False)[:500] + "..."
            except:
                preview = content[:500] + "..."
            preview = f"[JSON: {uploaded_file.name}]\n{preview}"

        else:
            content = file_bytes.decode("utf-8", errors="ignore")[:2000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
            preview = content[:500] + "..."
            preview = f"[–§–∞–π–ª: {uploaded_file.name} (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø)]\n{preview}"

        return {
            "name": uploaded_file.name,
            "content": content,
            "type": file_type,
            "preview": preview
        }
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {uploaded_file.name}: {e}")
        return None

# =========================
# –í—ã–≤–æ–¥ —á–∞—Ç–∞
# =========================
for msg in st.session_state.messages:
    if msg["role"] == "user":
        with st.chat_message("user"):
            st.markdown(msg["content"])
    else:
        with st.chat_message("assistant"):
            st.markdown(msg["content"])

# =========================
# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
# =========================
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # =========================
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    # =========================
    with st.chat_message("assistant"):
        placeholder = st.empty()
        placeholder.markdown("‚è≥ –û–±–¥—É–º—ã–≤–∞—é... (–∏—Å–ø–æ–ª—å–∑—É—é max_tokens=" + str(st.session_state.max_tokens) + ")")

        system_prompt = SYSTEM_PROMPTS[st.session_state.model].copy()
        if thinking_mode:
            system_prompt["content"] += "\nThink step by step and explain clearly."

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Å–∏—Å—Ç–µ–º–Ω—ã–π + –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π + —Ñ–∞–π–ª—ã (–¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å —Ç–æ–∫–µ–Ω—ã)
        api_messages = [system_prompt]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ user-—Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        recent_files = st.session_state.files[-5:]
        for file_info in recent_files:
            api_messages.append({
                "role": "user",
                "content": f"–í–æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_info['name']} (—Ç–∏–ø: {file_info['type']}):\n{file_info['content']}"
            })

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
        api_messages += [
            {"role": m["role"], "content": m["content"]}
            for m in st.session_state.messages[-20:]
        ]

        try:
            model_name = "openrouter/sonoma-sky-alpha" if st.session_state.model == "sonoma" else "deepseek/deepseek-chat:v3.1"
            completion = client.chat.completions.create(
                model=model_name,
                messages=api_messages,
                temperature=0.7,
                max_tokens=st.session_state.max_tokens  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ (–º–∞–∫—Å–∏–º—É–º!)
            )
            reply = completion.choices[0].message.content
            placeholder.markdown(reply)
            st.session_state.messages.append({"role": "assistant", "content": reply})
        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á, –º–æ–¥–µ–ª—å –∏ –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ (input –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)."
            placeholder.markdown(error_msg)
            st.session_state.messages.append({"role": "assistant", "content": error_msg})